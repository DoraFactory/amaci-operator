name: Publish Package

on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "No tests found, skipping..."
        continue-on-error: true

      - name: Build
        run: npm run build

      - name: Determine version and tags
        id: meta
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Determine npm tag
          if [[ "$VERSION" == *"beta"* ]]; then
            NPM_TAG="beta"
          elif [[ "$VERSION" == *"alpha"* ]]; then
            NPM_TAG="alpha"
          elif [[ "$VERSION" == *"rc"* ]]; then
            NPM_TAG="rc"
          else
            NPM_TAG="latest"
          fi
          echo "npm_tag=$NPM_TAG" >> $GITHUB_OUTPUT

          # Determine if this is a pre-release
          if [[ "$VERSION" == *"-"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Check npm authentication
        run: |
          echo "Checking npm auth token..."
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "ERROR: NODE_AUTH_TOKEN is not set"
            exit 1
          fi
          echo "Token is set (length: ${#NODE_AUTH_TOKEN})"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        run: npm publish --tag ${{ steps.meta.outputs.npm_tag }} --access public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASS }}
        continue-on-error: true

      - name: Extract Docker metadata
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
            dorafactory/maci-operator
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=${{ steps.meta.outputs.npm_tag }}
            type=raw,value=latest,enable=${{ steps.meta.outputs.npm_tag == 'latest' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          prerelease: ${{ steps.meta.outputs.prerelease }}
          body: |
            ## üì¶ Installation

            ### npm

            ```bash
            # Install specific version
            npm install -g @dorafactory/maci-operator@${{ steps.meta.outputs.version }}

            # Or install by tag
            npm install -g @dorafactory/maci-operator@${{ steps.meta.outputs.npm_tag }}
            ```

            ### Docker

            ```bash
            # Pull from GitHub Container Registry
            docker pull ghcr.io/dorafactory/amaci-operator:${{ steps.meta.outputs.npm_tag }}

            # Or from Docker Hub
            docker pull dorafactory/maci-operator:${{ steps.meta.outputs.npm_tag }}
            ```

            ## üöÄ Quick Start

            ```bash
            # Initialize operator
            maci init ./my-operator

            # Configure
            cd my-operator
            vim config.toml

            # Run with Docker
            docker-compose up -d
            ```

            ## üìö Documentation

            - [Docker Deployment Guide](https://github.com/${{ github.repository }}/blob/main/DOCKER.md)
            - [Main README](https://github.com/${{ github.repository }}/blob/main/README.md)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on related issues
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.meta.outputs.version }}';
            const tag = '${{ steps.meta.outputs.npm_tag }}';

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `üöÄ Published **v${version}** to npm with tag \`${tag}\`\n\n` +
                    `üì¶ \`npm install -g @dorafactory/maci-operator@${tag}\`\n` +
                    `üê≥ \`docker pull ghcr.io/dorafactory/amaci-operator:${tag}\``
            });
